@using Byte.Blog.Framework.Web
@model global::Byte.Blog.Editorial.Models.EntryEditModel

@Html.ValidationSummary()

@using (Html.BeginForm("save", "entries", FormMethod.Post, new { id = "entryform" }))
{
    <div class="row-fluid">
        <div class="span9">
            <fieldset class="well well-small">
                <div class="control-group">
                    @Html.LabelFor(m => m.Title, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(m => m.Title, new { @class = "input-block-level" })
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Slug))
                {
                    <div class="control-group">
                        @Html.LabelFor(m => m.Slug, new { @class = "control-label muted" })
                        <div class="controls">
                            @Html.TextBoxFor(m => m.Slug, new { @class = "input-block-level", disabled = "disabled" })
                        </div>
                    </div>
                }
                <div class="control-group">
                    <div class="controls">
                        <div class="wmd-panel">
                            <div id="wmd-button-bar"></div>
                        </div>
                        @Html.TextAreaFor(m => m.Body, new { rows = "10", id = "wmd-input", @class = "wmd-input input-block-level" })
                    </div>
                </div>
                <h3>Preview</h3>
                <div id="preview">
                    <div id="wmd-preview" class="well well-small wmd-panel wmd-preview"></div>
                </div>

            </fieldset>
        </div>
        <div class="span3">
            <div class="well">
                
                <div class="control-group">
                    <div class="controls">
                        <button type="button" id="Save" name="Save" class="btn btn-primary btn-large">Save</button>
                        <button type="button" id="Delete" name="Delete" class="btn btn-danger btn-large hide">Delete</button>
                        <button type="button" id="Undelete" name="Undelete" class="btn btn-warning btn-large hide">Undelete</button>
                    </div>
                </div>

                <div class="control-group">
                    <div class="controls">
                        <label class="radio" for="published-draft">
                            @Html.RadioButtonFor(m => m.Published, false, new { id = "published-draft" }) Draft 
                        </label>
                        <label class="radio" for="published-published">
                            @Html.RadioButtonFor(m => m.Published, true, new { id = "published-published" }) Published
                        </label>
                    </div>
                </div>
                
                <div class="control-group">
                    <div class="controls">
                        <input type="text" data-date-format="mm/dd/yyyy" id="publish-date" class="span2 date-picker">
                        <input type="text" id="publish-time" class="span1 time-picker">
                        @Html.HiddenFor(m => m.PublishedAtUtc, new { @class = "hidden-datetime" })
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(m => m.PageId, new { @class = "control-label" })
                    <div class="controls well">
                        @foreach (var possiblePage in Model.PossiblePages)
                        {
                            <label class="radio" for="@possiblePage.Id">
                                @Html.RadioButtonFor(p => p.PageId, possiblePage.Id, new { id = possiblePage.Id }) 
                                <span class="label"  style="background-color: @possiblePage.HtmlColor">@possiblePage.Title</span>
                            </label>
                        }

                        @*@Html.EditorFor(m => m.PageSelections)*@
                    </div>
                </div>
                
                @Html.HiddenFor(m => m.Deleted)
                @Html.HiddenFor(m => m.Id)
            </div>
        </div>
    </div>    
}

@section FooterScripts
{
    <script src="@Url.Content("~/editorial/assets/scripts/lib/serializeObject.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/lib/bootstrap-datepicker.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/lib/jquery.timePicker.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/lib/Markdown.Converter.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/lib/Markdown.Sanitizer.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/lib/Markdown.Editor.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/DateTimePickerView.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/editorial/assets/scripts/EntryFormView.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/editorial/assets/scripts/EntryFormRouter.js")" type="text/javascript"></script>

    <script type="text/javascript">

        $(document).ready(function () {

            var entryFormView = new window.EntryFormView({
                saveUrl: '@Url.Action("save")',
                el: $('#entryform'),
                modelId: '@Model.Id'
            });

            var entryFormRouter = new window.EntryFormRouter({
                entryEditUrlBase: '@Url.Action("edit", new { entryId = "/" })',
                view: entryFormView
            });

            var markdownConverter = Markdown.getSanitizingConverter();

            var markdownEditor = new Markdown.Editor(markdownConverter);
            markdownEditor.run();

        });

    </script>
}